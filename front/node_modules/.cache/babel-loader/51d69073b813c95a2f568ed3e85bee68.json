{"ast":null,"code":"var _jsxFileName = \"/Users/bunyo/React/react-libpro/src/UserPage.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport ReactTable from \"react-table\";\n\nclass UserPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userName: props.userName,\n      password: props.password\n    };\n  }\n\n  render() {\n    return React.createElement(ReactTable, {\n      data: this.props.data // The data prop should be immutable and only change when you want to update the table\n      ,\n      resolveData: data => data.map(row => row) // But you can break immutability here because `resolveData` runs when the `data` prop changes!\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default UserPage;","map":{"version":3,"sources":["/Users/bunyo/React/react-libpro/src/UserPage.js"],"names":["React","axios","ReactTable","UserPage","Component","constructor","props","state","userName","password","render","data","map","row"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,aAAvB;;AAEA,MAAMC,QAAN,SAAuBH,KAAK,CAACI,SAA7B,CAAuC;AACrCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAACC,MAAAA,QAAQ,EAACF,KAAK,CAACE,QAAhB;AAAyBC,MAAAA,QAAQ,EAACH,KAAK,CAACG;AAAxC,KAAb;AACD;;AACDC,EAAAA,MAAM,GAAE;AACN,WACE,oBAAC,UAAD;AACA,MAAA,IAAI,EAAE,KAAKJ,KAAL,CAAWK,IADjB,CACuB;AADvB;AAEA,MAAA,WAAW,EAAEA,IAAI,IAAIA,IAAI,CAACC,GAAL,CAASC,GAAG,IAAIA,GAAhB,CAFrB,CAE2C;AAF3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAMD;;AAZoC;;AAcvC,eAAeV,QAAf","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport ReactTable from \"react-table\";\n\nclass UserPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {userName:props.userName,password:props.password};\n  }\n  render(){\n    return(\n      <ReactTable\n      data={this.props.data} // The data prop should be immutable and only change when you want to update the table\n      resolveData={data => data.map(row => row)} // But you can break immutability here because `resolveData` runs when the `data` prop changes!\n      />\n    );\n  }\n}\nexport default UserPage;\n"]},"metadata":{},"sourceType":"module"}